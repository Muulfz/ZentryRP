---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Muulfz.
--- DateTime: 8/11/2018 23:17
---

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Muulfz.
--- DateTime: 8/4/2018 18:44
---
local lang = vRP.lang

-----------------------------------------------------------------------------------
-----------------------------------CURRENCY----------------------------------------

vRP.prepare("vRP/currency_tables",[[
CREATE TABLE IF NOT EXISTS vrp_srv_currency(
  dkey VARCHAR(100),
  dvalue TEXT,
  last_time_update INTEGER,
  CONSTRAINT pk_srv_data PRIMARY KEY(dkey)
);
]])
vRP.prepare("vRP/set_srvcurrency", "REPLACE INTO vrp_srv_currency(dkey,dvalue,last_time_update) VALUES(@key,@value,@last_time_update)")
vRP.prepare("vRP/get_srvcurrency", "SELECT dvalue FROM vrp_srv_currency WHERE dkey = @key")
vRP.prepare("vRP/get_srvcurrency_time", "SELECT last_time_update FROM vrp_srv_currency WHERE dkey = @key")

--[[print(lang.start.mysql.currency())
async(function ()
    vRP.getCurrency()
end)]]

-------------------------------------------------------------------------------------
-----------------------------------ADMINISTRATION------------------------------------

--                                 REPORT AND TICKET                               --

vRP.prepare("vRP/srv_ticket_tables",[[

CREATE TABLE IF NOT EXISTS vrp_srv_ticket
(
    ticket_id varchar(50),
    user_id integer,
    ticket varchar(255),
    date varchar(255),
    ingame_accept boolean,
    solved boolean,
    CONSTRAINT pk_srv_ticket PRIMARY KEY (ticket_id, user_id),
    CONSTRAINT vrp_srv_ticket_vrp_users_id_fk FOREIGN KEY (user_id) REFERENCES vrp_users (id) ON DELETE CASCADE
);
 ]])
vRP.prepare("vRP/srv_report_tables",[[

CREATE TABLE IF NOT EXISTS vrp_srv_report
(
    report_id varchar(50),
    user_id integer,
    report varchar(255),
    date varchar(255),
    close boolean,
    CONSTRAINT pk_srv_report PRIMARY KEY (report_id, user_id),
    CONSTRAINT vrp_srv_report_vrp_users_id_fk FOREIGN KEY (user_id) REFERENCES vrp_users (id) ON DELETE CASCADE
);
 ]])

vRP.prepare("vRP/srv_report_player_tables",[[
CREATE TABLE IF NOT EXISTS vrp_srv_report_player
(
    report_id varchar(50),
    user_id INTEGER,
    report varchar(255),
    date varchar(255),
    report_player integer,
    was_online BOOLEAN,
    close boolean,
    CONSTRAINT vrp_srv_report_player_pk PRIMARY KEY (report_id, user_id),
    CONSTRAINT vrp_srv_report_player_vrp_users_id_fk FOREIGN KEY (user_id) REFERENCES vrp_users (id) ON DELETE CASCADE,
    CONSTRAINT vrp_srv_report_send_vrp_users_id_fk FOREIGN KEY (report_player) REFERENCES vrp_users (id) ON DELETE CASCADE


);
 ]])
vRP.prepare("vRP/create_srv_ticket", "INSERT INTO vrp_srv_ticket(ticket_id,user_id,ticket,date,ingame_accept,solved) VALUES(@ticket_id,@user_id,@ticket,@date,@ingame_accept,@solved)")
-- vRP.prepare("vRP/get_srv_ticket", "SELECT t.* FROM vrp.vrp_srv_ticket t WHERE ticket_id = 1 ") --TODO Fazer isso ter sentido!
vRP.prepare("vRP/create_srv_report_player", "INSERT INTO vrp_srv_report_player(report_id,user_id,report,report_player,was_online,date,close) VALUE(@report_id,@user_id,@report,@report_player,@was_online,@date,false)")
vRP.prepare("vRP/create_srv_report", "INSERT INTO vrp_srv_report(report_id,user_id,report,date,close) VALUES(@report_id,@user_id,@report,@date,false)")
--                                        BAN SYSTEM                                  --

vRP.prepare("vRP/user_bans_tables",
[[
CREATE TABLE IF NOT EXISTS vrp_user_bans (
	`UUID` varchar(100),
	`user_id` integer,
	`admin_id` integer,
	`reason` varchar(255),
	`ban_date` integer,
	`ban_expire_date` integer,
	`appeal` boolean,
	`appeal_reason` varchar(255),
	`appeal_admin_id` integer,
  CONSTRAINT pk_user_bans PRIMARY KEY(UUID),
  CONSTRAINT fk_user_bans_users FOREIGN KEY(user_id) REFERENCES vrp_users(id) ON DELETE CASCADE,
  CONSTRAINT fk_user_bans_admin__users FOREIGN KEY(admin_id) REFERENCES vrp_users(id) ON DELETE CASCADE,
  CONSTRAINT fk_user_bans_appeal_admin__users FOREIGN KEY(appeal_admin_id) REFERENCES vrp_users(id) ON DELETE CASCADE
);]])

vRP.prepare("vRP/set_banned_adv", "INSERT INTO vrp_user_bans(UUID,user_id,admin_id,reason,ban_date,ban_expire_date) VALUES(@UUID,@user_id,@admin_id,@reason,@ban_date,@ban_expire_date)")
vRP.prepare("vRP/get_banned_last_time", "SELECT MIN(ban_finish),ban_finish, ban_expire_date, UUID FROM vrp_user_bans WHERE user_id = @user_id")
vRP.prepare("vRP/get_ban_uuid", "SELECT UUID, MAX(ban_expire_date) FROM vrp_user_bans WHERE user_id = @user_id")
vRP.prepare("vRP/adv_unban","UPDATE vrp_user_bans SET ban_finish = @ban_finish WHERE UUID = @UUID")
--------------------------------------------------------------------------------------
-------------------------------------SERVER DATA -------------------------------------
--
vRP.prepare("vRP/user_id_exist", "SELECT id FROM vrp_users WHERE id = @id")

vRP.prepare("vRP/ban_UUID_exist", "SELECT UUID FROM vrp_user_bans WHERE UUID = @UUID")

vRP.prepare("vRP/get_already_appeal", "SELECT appeal FROM vrp_user_bans WHERE UUID = @UUID")

vRP.prepare("vRP/set_appeal", "UPDATE vrp_user_bans SET appeal = @appeal, appeal_reason = @appeal_reason, appeal_admin_id = @appeal_admin_id  WHERE UUID = @UUID")

vRP.prepare("vRP/set_ban_time", "UPDATE vrp_user_bans SET ban_expire_date = @ban_expire_date WHERE UUID = @UUID")

vRP.prepare("vRP/get_ban_reg", "SELECT UUID,user_id,admin_id,reason,ban_date,ban_expire_date,appeal,appeal_reason,appeal_admin_id FROM vrp_user_bans WHERE UUID = @UUID")