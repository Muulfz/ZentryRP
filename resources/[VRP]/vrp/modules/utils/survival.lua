---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Muulfz.
--- DateTime: 9/25/2018 13:08
---
local cfg = module("cfg/survival")
local lang = vRP.lang

function vRP.getHealthScale(user_id)
    local data = vRP.getUserDataTable(user_id)
    if data then
        print("Vida getada " .. data.health_scale)
        return data.health_scale
    end
    return 0
end

function vRP.setHealthScale(user_id, value)
    local data = vRP.getUserDataTable(user_id)
    if data then
        data.health_scale = value
        if data.health_scale < 0 then
            data.health_scale = 0
        elseif data.health_scale > 200 then
            data.health_scale = 200
        end
    end
    print("Vida setada " .. data.health_scale)
end

function vRP.varyHealthScale(user_id, variation)
    local data = vRP.getUserDataTable(user_id)
    if data then
        local was_sick = data.health_scale <= 0
        data.health_scale = data.health_scale + variation
        local is_sick = data.health_scale <= 0
        local overflow = data.health_scale + 200
        print("VALOR DA VIDA " .. data.health_scale)
        if overflow <= 200 then
            print("OVERFLOW VIDA " .. overflow)
            overflow = 200 - overflow
            vRPclient._varyHealth(vRP.getUserSource(user_id), -overflow * cfg.overflow_damage_factor)
        end

        if data.health_scale < 0 then
            data.health_scale = 0
        elseif data.health_scale > 200 then
            data.health_scale = 200
        end
        print("POS DA VIDA POS TUDO " .. data.health_scale)
    end
end

function vRP.addHealthScale(user_id, value)
    local data = vRP.getUserDataTable(user_id)
    if data then
        data.health_scale = data.health_scale + value
    end
end

function vRP.happinesHealthScale(user_id)
    local data = vRP.getUserDataTable(user_id)
    if data then
        local happiness_value = data.happiness
        local variation = 0
        if happiness_value >= 100 and happiness_value < 150 then
            variation = data.health_scale * cfg.variantion_happiness_1 * 0.01
            vRP.setHealthScale(user_id,data.health_scale + variation)
            return
        elseif happiness_value >= 150 and happiness_value < 180 then
            variation = data.health_scale * cfg.variantion_happiness_2 * 0.01
            vRP.setHealthScale(user_id,data.health_scale + variation)
            return
        elseif happiness_value >= 180 then
            variation = data.health_scale * cfg.variantion_happiness_3 * 0.01
            vRP.setHealthScale(user_id,data.health_scale + variation)
        elseif happiness_value <= 30 then
            variation = data.health_scale * cfg.variation_happiness_less*0.01
            vRP.setHealthScale(user_id,data.health_scale - variation)
        end
    end
end

function vRP.getHappiness(user_id)
    local data = vRP.getUserDataTable(user_id)
    if data then
        print("Happy getada " .. data.happiness)
        return data.happiness
    end
    return 0
end

function vRP.setHappiness(user_id, value)
    local data = vRP.getUserDataTable(user_id)
    if data then
        data.happiness = value
        if data.happiness < 0 then
            data.happiness = 0
        elseif data.happiness > 200 then
            data.happiness = 200
        end
    end
    print("Happy setada " .. data.happiness)
end

function vRP.varyHappiness(user_id, variation)
    local data = vRP.getUserDataTable(user_id)
    if data then
        local was_unhappy = data.happiness <= 0
        data.happiness = data.happiness + variation
        local is_unhappy = data.happiness <= 0
        local overflow = data.happiness + 200
        print("VALOR DA HAPPY " .. data.happiness)
        if overflow <= 200 then
            print("OVERFLOW HAPPY " .. overflow)
            overflow = 200 - overflow
            vRPclient._varyHealth(vRP.getUserSource(user_id), -overflow * cfg.overflow_damage_factor)
        end

        if data.happiness < 0 then
            data.happiness = 0
        elseif data.happiness > 200 then
            data.happiness = 200
        end
        print("POS DA HAPPY POS TUDO " .. data.happiness)
    end
end

function vRP.addHappiness(user_id, value)
    local data = vRP.getUserDataTable(user_id)
    if data then
        data.happiness = data.happiness + value
    end
end

function vRP.getPee(user_id)
    local data = vRP.getUserDataTable(user_id)
    if data then
        return data.pee
    end

    return 0
end

function vRP.getSleep(user_id)
    local data = vRP.getUserDataTable(user_id)
    if data then
        return data.sleep
    end

    return 0
end

function vRP.setPee(user_id,value)
    local data = vRP.getUserDataTable(user_id)
    if data then
        data.pee = value
        if data.pee < 0 then data.pee = 0
        elseif data.pee > 100 then data.pee = 100
        end

        -- update bar
        local source = vRP.getUserSource(user_id)
        vRPclient._setProgressBarValue(source, "vRP:pee",data.pee)
        if data.pee >= 100 then
            vRPclient._setProgressBarText(source,"vRP:pee",lang.survival.starving())
        else
            vRPclient._setProgressBarText(source,"vRP:pee","")
        end
    end
end

function vRP.setSleep(user_id,value)
    local data = vRP.getUserDataTable(user_id)
    if data then
        data.sleep = value
        if data.sleep < 0 then data.sleep = 0
        elseif data.sleep > 100 then data.sleep = 100
        end

        -- update bar
        local source = vRP.getUserSource(user_id)
        vRPclient._setProgressBarValue(source, "vRP:sleep",data.sleep)
        if data.sleep >= 100 then
            vRPclient._setProgressBarText(source,"vRP:sleep",lang.survival.sleepy())
        else
            vRPclient._setProgressBarText(source,"vRP:sleep","")
        end
    end
end

function vRP.varyPee(user_id, variation)
    local data = vRP.getUserDataTable(user_id)
    if data then
        local was_peeing = data.pee >= 100
        data.pee = data.pee + variation
        local is_peeing = data.pee >= 100
        print("banheiro " ..data.pee)
        -- apply overflow as damage
        local overflow = data.pee-100
        if overflow > 0 then
            vRPclient._playAnim(source,false,{"missbigscore1switch_trevor_piss","piss_loop",1},false)
            if not data.pee.is then  --TODO adicionar quando o meliante se logar
                data.peeing.is = true
                data.peeing.time = 1
            elseif data.peeing.is then
                if data.peeing.time == cfg.peeing_time then
                    vRPclient._playAnim(source,false,{"missbigscore1switch_trevor_piss","piss_loop",1},false)
                    SetTimeout(1,function ()
                        local source = vRP. getUserSource(user_id)
                        vRPclient._stopAnim(source,false)
                        data.peeing.is = false
                        data.peeing.time = 0
                        data.pee = data.pee - 50
                    end)
                end
                data.peeing.time = data.peeing.time + 1
            end
        end

        if data.pee < 0 then data.pee = 0
        elseif data.pee > 100 then data.pee = 100
        end

        -- set progress bar data
        local source = vRP.getUserSource(user_id)
        vRPclient._setProgressBarValue(source,"vRP:pee",data.pee)
        if was_peeing and not is_peeing then
            vRPclient._setProgressBarText(source,"vRP:pee","")
        elseif not was_peeing and is_peeing then
            vRPclient._setProgressBarText(source,"vRP:pee",lang.survival.peeing())
        end
    end
end

function vRP.varySleep(user_id, variation)
    local data = vRP.getUserDataTable(user_id)
    local source = vRP.getUserSource(user_id)
    if data then
        local was_sleepy = data.sleep >= 100
        data.sleep = data.sleep + variation
        local is_sleepy = data.sleep >= 100
        print("Sono " ..data.sleep)
        -- apply overflow as damage
        local overflow = data.sleep-100
        if overflow > 0 then
            vRPclient._playAnim(source,false,{task="WORLD_HUMAN_BUM_SLUMPED"},false)
            if not data.sleeping.is then
                data.sleeping.is = true
                data.sleeping.time = 1
            elseif data.sleeping.is then
                if data.sleeping.time == cfg.sleeping_time then
                    vRPclient._playAnim(source,false,{task="WORLD_HUMAN_BUM_SLUMPED"},false)
                    SetTimeout(1,function ()
                        local source = vRP. getUserSource(user_id)
                        vRPclient._stopAnim(source,false)
                        data.sleeping.is = false
                        data.sleeping.time = 0
                        data.sleep = data.sleep - 30
                    end)
                end
                data.sleeping.time = data.sleeping.time + 1
            end
        end

        if data.sleep < 0 then data.sleep = 0
        elseif data.sleep > 100 then data.sleep = 100
        end

        -- set progress bar data
        vRPclient._setProgressBarValue(source,"vRP:sleep",data.sleep)
        if was_sleepy and not is_sleepy then
            vRPclient._setProgressBarText(source,"vRP:sleep","")
        elseif not was_sleepy and is_sleepy then
            vRPclient._setProgressBarText(source,"vRP:sleep",lang.survival.sleepy())
        end
    end
end

-- tunnel api (expose some functions to clients)

function tvRP.varyPee(variation)
    local user_id = vRP.getUserId(source)
    if user_id then
        vRP.varyPee(user_id,variation)
    end
end

function tvRP.varySleep(variation)
    local user_id = vRP.getUserId(source)
    if user_id then
        vRP.varySleep(user_id,variation)
    end
end